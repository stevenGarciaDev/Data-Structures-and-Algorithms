Introduction

What are Queues

Queues in Java

Exercise - Reversing a Queue

Solution - Reversing a Queue

Exercise - Building a Queue using an Array

Solution - A Basic Implementation

Solution - Circular Arrays

Exercise - Implementing A Queue using a Stack

Solution - Building a Queue using a stack

Priority Queues

Exercise - Building a Priority Queue

Solution - Building a Priority Queue

Solution - Refactoring

Queues - Exercises

Summary

/* -------------

Introduction

  Queues have a lot of applications,
  as used by printers, web servers,
  operating systems,
  and
  anywhere you want to process jobs
  based on the order that you received them.

  Queues are used when sharing a resource
  amongst many consumers.
  // they line up and use the resource one by one


What are Queues?

  Queues have a front and a back.

  Where the first item inserted,
  will be the first one to be removed.

  FIFO (first in - first out)

  Stacks are LIFO


  Queue is like a line of people.

  Can use it in a situation where
  we have a resource, and the resource
  must be shared amongst many consumers.

  The consumers line up and use the resource.

  Ex:

  Printers
    -> use queues to manage jobs

  operating Systems
    -> to manage process

    they wait for their turn to run

  web servers
    -> to manage incoming request

  live support systems
    ->


  Operations
  -

  enqueue
    // adding an item

  dequeue
    // removing from front

  peek
    // getting item at the front

  isEmpty

  isFull


  All these operations are O(1)
  since all take place at the end


Queues in Java


  Queue is an interface, not a class.

  So can't instantiate.

  Search the javadocs.

  There are many different implementations.

  90% of the time you would use
  ArrayDeque and LinkedList.

  So ArrayDeque
  stands for double ended queue.
  Can add from front or back.

  Internally it uses a resizable array.

  -

  package com.stevenonsoftware;

  import java.util.Queue;


  public class Main {
    public static void main(String[] args) {
      Queue<Integer> q = new ArrayDeque<>();
      queue.add(10);
      queue.add(20);
      queue.add(30);
      System.out.println(queue);
    }
  }


  so removed from the front (beginning of the array),
  added to the end



Exercise - Reversing a Queue

  front     back
  [10, 20, 30]

  After reversing the order will be

  [30, 20, 10]

  So implement method

  public static void reverse(Queue<Integer> queue) {
    //
  }

  NOTE:



  You are only allowed to use
  // add
  // remove
  // isEmpty

  Nothing else.

  NOTE: Think about reversing a string




Solution - Reversing a Queue

  My Idea:

  Create a new queue,

  Continually remove elements from
  queue until it's empty.
  Utilize the stack data structure.

  Since we are continually reversing it.

  To keep track, and reverse the items.

  public static void reverse(Queue<Integer> queue) {
      Stack<Integer> stack = new Stack<>();

      while (!queue.isEmpty()) {
          int element = queue.remove();
          stack.push(element);
      }

      while (!stack.empty()) {
          queue.add(stack.pop());
      }
  }

  --

  Mosh's solution is the same.


Exercise - Building a Queue using an Array

  There are three ways to implement a queue.

  - Array
  - Linked List
  - Stack


  So you need to know all the implementations.

  Implement
  ArrayQueue // similar to ArrayDeque

  For the operations of

    enqueue
    dequeue
    peek
    isEmpty
    isFull

  Hint:
    [0, 0, 0, 0, 0]


    [10, 20, 30, 40, 0]
    F             R

    F = 0
    R = 3

    // F is for front
    // R is for rear

    // removed from the front
    // we don't shift items around,
    // rather we use two pointers
    // to determine the front
    // and the rear

    // the pointers point to the index


    So when add a new item,
    move R forward,
    and when remove, we move the
    F pointer forward.

  So it's still in the memory,
  but we don't see it.



Solution - A Basic Implementation

  Mosh's implementations

  public class ArrayQueue {
    private int[] items;
    private int rear;
    private int front;
    private int count;

    public ArrayQueue(int capacity) {
      this.items = new int[capacity];
    }

    public void enqueue(int item) {
      // use the rear pointer which
      // determines where to insert

      if (count == items.length)
        throw new IllegalStateException();

      items[rear++] = item;
      count++;

    }

    public int dequeue() {
      var item = items[front];
      items[front++] = 0;
      return item;
    }

    @Override
    public String toString() {
      return Arrays.toString(items);
    }
  }


Solution - Circular Arrays

  A powerful concept in data structures.

  Imagine our queue.

  [0, 0, 30, 40, 50]
                  R

  So when you want to enqueue,
  the R pointer will then be outside
  the bounds of the array.

  [0, 0, 30, 40, 50]
                      R

  So if we were to resize the array,
  that would be an inefficient solution
  since we are allocating memory
  and need to copy all the values
  into the new one.

  So this is where circular arrays
  come to the rescue.

  So we make the R pointer,
  refer back to the beginning on the array.


  [0, 0, 30, 40, 50]
   R

  When R pointer is outside the boundary,
  we map it to index 0.


  We take the 'index' value
  and divide it by the actual length
  of the array.

  This gives us the actual index value.

  So instead of

  rear++

  We perform

  (rear + 1) % length_of_array

  -
  [10, 20, 0, 0, 0]

  2 % 5 = 1

  public void enqueue(int item) {
    if (count == items.length)
      throw new IllegalStateException();

    items[rear] = item;

    // then update the rear pointer
    rear = (rear + 1) % items.length;
    count++;
  }

  public int dequeue() {
    var item = items[front];
    items[front] = 0;
    front = (front + 1) % items.length;
    return item;
  }


  So basically we mod the index pointer value
  as to ensure that we don't get
  an out of bounds error.


Exercise - Implementing A Queue using a Stack

    [10, 20, 30]

    Queues, items are added at the end
    of the queue and removed from the front.

    That's the opposite of stacks.

    We need to use two stacks!

  So we can move things around

Solution - Building a Queue using a stack

  So the algorithm for implementing
  a queue using two stacks.

  Q  []
  S1 []
  S2 []

  -
     F        R
  Q  [10, 20, 30]

              T
  S1 [10, 20, 30]
  S2 []

  queue.dequeue();

  So we use S2 to reverse the stack as to
  access.

  It becomes

  Q  [ 20, 30]
  S1 []
  S2 [30, 20, 10]

  // and we perform S2.pop() for dequeue
  // and the result is

  Q  [ 20, 30]
  S1 []
  S2 [30, 20]


  So to enqueue,
  we add it to the first stack.

  q.enqueue(40);

  It becomes


  Q [20, 30, 40]

  S1 [40]           // enqueue

  S2 [30, 20]       // dequeue


  So we use the first stack for the
  enqueue operation.

  And the second stack for the dequeue operation.


  NOTE:
    The algorithm is that whenever the second
    stack is empty and we are calling dequeue,
    we need
    to move all the items in the first stack
    into the second stack.

    ONLY move if stack2 is empty.

  -
  Mosh's implementation


  QueueWithTwoStacks

  public class QueueWithTwoStacks {
    private Stack<Integer> stack1 = new Stack<>();
    private Stack<Integer> stack2 = new Stack<>();

    public void enqueue(int item) {
      stack1.push(item);
    }

    public int dequeue() {
      // check if both stacks are empty,
      // meaning that our queue is empty
      if (this.isEmpty())
        throw new IllegalStateException();

      moveStack1ToStack2();

      return stack2.pop();
    }

    public boolean isEmpty() {
      return stack1.isEmpty() && stack2.isEmpty();
    }

    public int peek() {
      if (this.isEmpty())
        throw new IllegalStateException();

      moveStack1ToStack2();
      return stack2.peek();
    }

    private moveStack1ToStack2() {
      if (stack2.isEmpty()) {
        while (!stack1.isEmpty()) {
          stack2.push(stack1.pop());
        }
      }
    }
  }


Priority Queues

  Objects are processed based on their priority,
  not the order in which they join the queue.

  Imagine a pile of mail.
  You just want to order them based on priority.

  Ex:

  import java.util.PriorityQueue;

  public class Main {
    public static void main(String[] args) {
      PriorityQueue<Integer> queue = new PriorityQueue<>();
      queue.add(5);
      queue.add(1);
      queue.add(3);
      queue.add(2);
      while (!queue.isEmpty()) {
        System.out.println(queue.remove());
      }
    }
  }

  // by default, in Java
  // the smallest values will be removed first
  // meaning it'll be in the front of the queue

Exercise - Building a Priority Queue

  // one way to implement

  there are two ways
  can use arrays
  or can use heaps

  so create class, PriorityQueue

  [1, 3, 5, 7]

  insert(2)


  so it becomes

  [1, 2, 3, 5, 7]

  So how to find the right position to insert?

    -> can do it linearly by
    begin comparing from the right,

    This way ensures that you don't loose values,


              |
    [1, 3, 5, 7]

    // is 7 larger than 2?
      yes, so shift 7 to the right

           |
    [1, 3, 5, 7, 7]

    // is 5 larger than 2?
      yes so shift 5 to the right

        |
    [1, 3, 5, 5, 7]

     |
    [1, 3, 3, 5, 7]

      // is 1 larger than 2?
        no, so insert the new value to the
        right

    [1, 2, 3, 5, 7]

  consider edge
  cases if the array is empty,
  or a single item, or an even # of items,
  what if it gets full


Solution - Building a Priority Queue

  Narrow down the problem and only solve for a small part.


  public class PriorityQueue {
    private int[] items = new int[5];
    private int count;

    public void add(int item) {

      // shifting items
      int i;
      for (i = count - 1; i >= 0; i--) {
        if (items[i] > item) {
          // shift current item to the right
          items[i + 1] = items[i];
        } else {
          break;
        }
      }
      items[i + 1] = item;
      count++;
    }

    // so for the remove operation,
    // we could just use a pointer to reference the front
    // so just increment it
  }


Solution - Refactoring

  Whenever you have comments in your code,
  consider extracting it into a private method.

  // refactor for when shifting in insert() method

  // it returns the index to insert
  public int shiftItems(int item)


  Also can refactor for conditionals,
  as to make it more descriptive and reusable.


Queues - Exercises


  Reverse order of first k elements of a queue.

  



Summary
